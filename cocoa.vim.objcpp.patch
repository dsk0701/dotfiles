diff --git a/autoload/objc/man.vim b/autoload/objc/man.vim
index e4f9a90..531652a 100644
--- a/autoload/objc/man.vim
+++ b/autoload/objc/man.vim
@@ -18,7 +18,9 @@ let locations = [
 			\	{'path': '/Developer/Documentation/DocSets/com.apple.adc.documentation.AppleSnowLeopard.CoreReference.docset',
 			\	'alias': 'Snow Leopard'},
 			\	{'path': '/Developer/Platforms/iPhoneOS.platform/Developer/Documentation/DocSets/com.apple.adc.documentation.AppleiPhone3_0.iPhoneLibrary.docset',
-			\	'alias': 'iPhone 3.0'}
+			\	'alias': 'iPhone 3.0'},
+			\	{'path': '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Documentation/DocSets/com.apple.adc.documentation.AppleiOS5_1.iOSLibrary.docset',
+			\	'alias': 'iPhone 5.1'}
 			\	]
 for location in locations
 	if isdirectory(location.path)
diff --git a/ftplugin/objc_cocoa_mappings.vim b/ftplugin/objc_cocoa_mappings.vim
index 629d0b7..3a801d7 100644
--- a/ftplugin/objc_cocoa_mappings.vim
+++ b/ftplugin/objc_cocoa_mappings.vim
@@ -3,22 +3,37 @@
 " Description: Sets up mappings for cocoa.vim.
 " Last Updated: December 26, 2009
 
-if exists('b:cocoa_proj') || &cp || version < 700
+if exists('b:cocoa_proj_or_workspace') || &cp || version < 700
 	finish
 endif
-let b:cocoa_proj = fnameescape(globpath(expand('<afile>:p:h'), '*.xcodeproj'))
-" Search a few levels up to see if we can find the project file
-if empty(b:cocoa_proj)
-	let b:cocoa_proj  = fnameescape(globpath(expand('<afile>:p:h:h'), '*.xcodeproj'))
+let b:cocoa_proj_or_workspace = fnameescape(globpath(expand('<afile>:p:h'), '*.xcworkspace'))
+" Search a few levels up to see if we can find the workspace file
+if empty(b:cocoa_proj_or_workspace)
+	let b:cocoa_proj_or_workspace  = fnameescape(globpath(expand('<afile>:p:h:h'), '*.xcworkspace'))
 
-	if empty(b:cocoa_proj)
-		let b:cocoa_proj = fnameescape(globpath(expand('<afile>:p:h:h:h'), '*.xcodeproj'))
-		if empty(b:cocoa_proj)
-			let b:cocoa_proj = fnameescape(globpath(expand('<afile>:p:h:h:h:h'), '*.xcodeproj'))
+	if empty(b:cocoa_proj_or_workspace)
+		let b:cocoa_proj_or_workspace = fnameescape(globpath(expand('<afile>:p:h:h:h'), '*.xcworkspace'))
+		if empty(b:cocoa_proj_or_workspace)
+			let b:cocoa_proj_or_workspace = fnameescape(globpath(expand('<afile>:p:h:h:h:h'), '*.xcworkspace'))
 		endif
 	endif
 endif
-let g:x = b:cocoa_proj
+
+if empty(b:cocoa_proj_or_workspace)
+    let b:cocoa_proj_or_workspace = fnameescape(globpath(expand('<afile>:p:h'), '*.xcodeproj'))
+    " Search a few levels up to see if we can find the project file
+    if empty(b:cocoa_proj_or_workspace)
+        let b:cocoa_proj_or_workspace  = fnameescape(globpath(expand('<afile>:p:h:h'), '*.xcodeproj'))
+
+        if empty(b:cocoa_proj_or_workspace)
+            let b:cocoa_proj_or_workspace = fnameescape(globpath(expand('<afile>:p:h:h:h'), '*.xcodeproj'))
+            if empty(b:cocoa_proj_or_workspace)
+                let b:cocoa_proj_or_workspace = fnameescape(globpath(expand('<afile>:p:h:h:h:h'), '*.xcodeproj'))
+            endif
+        endif
+    endif
+endif
+let g:x = b:cocoa_proj_or_workspace
 
 com! -buffer ListMethods call objc#method_list#Activate(1)
 com! -buffer -nargs=? -complete=customlist,objc#method_builder#Completion BuildMethods call objc#method_builder#Build('<args>')
@@ -37,7 +52,7 @@ nn <buffer> <silent> <d-K> :w<bar>cal<SID>XcodeRun('clean')<cr>
 " TODO: Add this
 " nn <buffer> <silent> <d-y> :w<bar>cal<SID>BuildAnd('debug')<cr>
 nn <buffer> <silent> <d-m-up> :cal<SID>AlternateFile()<cr>
-nn <buffer> <silent> <d-0> :call system('open -a Xcode '.b:cocoa_proj)<cr>
+nn <buffer> <silent> <d-0> :call system('open -a Xcode '.b:cocoa_proj_or_workspace)<cr>
 nn <buffer> <silent> <d-2> :<c-u>ListMethods<cr>
 nm <buffer> <silent> <d-cr> <d-r>
 ino <buffer> <silent> <f5> <c-x><c-o>
@@ -50,7 +65,7 @@ if exists('*s:AlternateFile') | finish | endif
 " Switch from header file to implementation file (and vice versa).
 fun s:AlternateFile()
 	let path = expand('%:p:r').'.'
-	let extensions = expand('%:e') == 'h' ? ['m', 'c', 'cpp'] : ['h']
+	let extensions = expand('%:e') == 'h' ? ['m', 'mm', 'c', 'cpp'] : ['h']
 	if !s:ReadableExtensionIn(path, extensions)
 		  echoh ErrorMsg | echo 'Alternate file not readable.' | echoh None
 	endif
@@ -70,16 +85,16 @@ endf
 
 " Opens Xcode and runs Applescript command.
 fun s:XcodeRun(command)
-	call system("open -a Xcode ".b:cocoa_proj." && osascript -e 'tell app "
-				\ .'"Xcode" to '.a:command."' &")
+    call system("open -a Xcode ".b:cocoa_proj_or_workspace." && osascript -e 'tell app "
+                \ .'"Xcode" to '.a:command."' &")
 endf
 
 fun s:BuildAnd(command)
-	call system("open -a Xcode ".b:cocoa_proj." && osascript -e 'tell app "
-				\ ."\"Xcode\"' -e '"
-				\ .'set target_ to project of active project document '
-				\ ."' -e '"
-				\ .'if (build target_) starts with "Build succeeded" then '
-				\ .a:command.' target_'
-				\ ."' -e 'end tell'")
+    call system("open -a Xcode ".b:cocoa_proj_or_workspace." && osascript -e 'tell app "
+                \ ."\"Xcode\"' -e '"
+                \ .'set target_ to project of active project document '
+                \ ."' -e '"
+                \ .'if (build target_) starts with "Build succeeded" then '
+                \ .a:command.' target_'
+                \ ."' -e 'end tell'")
 endf
diff --git a/ftplugin/objcpp_cocoa_mappings.vim b/ftplugin/objcpp_cocoa_mappings.vim
new file mode 100644
index 0000000..0fe02b3
--- /dev/null
+++ b/ftplugin/objcpp_cocoa_mappings.vim
@@ -0,0 +1,4 @@
+" File: objcpp_cocoa_mappings.vim
+ru ftplugin/objc_cocoa_mappings.vim
+
+
diff --git a/plugin/cocoa.vim b/plugin/cocoa.vim
index 5bb533f..303e292 100644
--- a/plugin/cocoa.vim
+++ b/plugin/cocoa.vim
@@ -8,9 +8,9 @@ let s:did_cocoa = 1
 " These have to load after the normal ftplugins to override the defaults; I'd
 " like to put this in ftplugin/objc_cocoa_mappings.vim, but that doesn't seem
 " to work..
-au FileType objc ru after/syntax/objc_enhanced.vim
+au FileType objc,objcpp ru after/syntax/objc_enhanced.vim
 			\| let b:match_words = '@\(implementation\|interface\):@end'
 			\| setl inc=^\s*#\s*import omnifunc=objc#cocoacomplete#Complete
-			\| if globpath(expand('<afile>:p:h'), '*.xcodeproj') != '' |
+			\| if b:cocoa_proj_or_workspace != '' |
 			\  setl makeprg=open\ -a\ xcode\ &&\ osascript\ -e\ 'tell\ app\ \"Xcode\"\ to\ build'
 			\| endif
